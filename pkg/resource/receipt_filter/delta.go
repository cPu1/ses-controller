// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package receipt_filter

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.Filter, b.ko.Spec.Filter) {
		delta.Add("Spec.Filter", a.ko.Spec.Filter, b.ko.Spec.Filter)
	} else if a.ko.Spec.Filter != nil && b.ko.Spec.Filter != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.Filter.IPFilter, b.ko.Spec.Filter.IPFilter) {
			delta.Add("Spec.Filter.IPFilter", a.ko.Spec.Filter.IPFilter, b.ko.Spec.Filter.IPFilter)
		} else if a.ko.Spec.Filter.IPFilter != nil && b.ko.Spec.Filter.IPFilter != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Filter.IPFilter.CIDR, b.ko.Spec.Filter.IPFilter.CIDR) {
				delta.Add("Spec.Filter.IPFilter.CIDR", a.ko.Spec.Filter.IPFilter.CIDR, b.ko.Spec.Filter.IPFilter.CIDR)
			} else if a.ko.Spec.Filter.IPFilter.CIDR != nil && b.ko.Spec.Filter.IPFilter.CIDR != nil {
				if *a.ko.Spec.Filter.IPFilter.CIDR != *b.ko.Spec.Filter.IPFilter.CIDR {
					delta.Add("Spec.Filter.IPFilter.CIDR", a.ko.Spec.Filter.IPFilter.CIDR, b.ko.Spec.Filter.IPFilter.CIDR)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Filter.IPFilter.Policy, b.ko.Spec.Filter.IPFilter.Policy) {
				delta.Add("Spec.Filter.IPFilter.Policy", a.ko.Spec.Filter.IPFilter.Policy, b.ko.Spec.Filter.IPFilter.Policy)
			} else if a.ko.Spec.Filter.IPFilter.Policy != nil && b.ko.Spec.Filter.IPFilter.Policy != nil {
				if *a.ko.Spec.Filter.IPFilter.Policy != *b.ko.Spec.Filter.IPFilter.Policy {
					delta.Add("Spec.Filter.IPFilter.Policy", a.ko.Spec.Filter.IPFilter.Policy, b.ko.Spec.Filter.IPFilter.Policy)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}

	return delta
}
