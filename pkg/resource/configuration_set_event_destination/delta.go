// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package configuration_set_event_destination

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.ConfigurationSetName, b.ko.Spec.ConfigurationSetName) {
		delta.Add("Spec.ConfigurationSetName", a.ko.Spec.ConfigurationSetName, b.ko.Spec.ConfigurationSetName)
	} else if a.ko.Spec.ConfigurationSetName != nil && b.ko.Spec.ConfigurationSetName != nil {
		if *a.ko.Spec.ConfigurationSetName != *b.ko.Spec.ConfigurationSetName {
			delta.Add("Spec.ConfigurationSetName", a.ko.Spec.ConfigurationSetName, b.ko.Spec.ConfigurationSetName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EventDestination, b.ko.Spec.EventDestination) {
		delta.Add("Spec.EventDestination", a.ko.Spec.EventDestination, b.ko.Spec.EventDestination)
	} else if a.ko.Spec.EventDestination != nil && b.ko.Spec.EventDestination != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.EventDestination.CloudWatchDestination, b.ko.Spec.EventDestination.CloudWatchDestination) {
			delta.Add("Spec.EventDestination.CloudWatchDestination", a.ko.Spec.EventDestination.CloudWatchDestination, b.ko.Spec.EventDestination.CloudWatchDestination)
		} else if a.ko.Spec.EventDestination.CloudWatchDestination != nil && b.ko.Spec.EventDestination.CloudWatchDestination != nil {
			if len(a.ko.Spec.EventDestination.CloudWatchDestination.DimensionConfigurations) != len(b.ko.Spec.EventDestination.CloudWatchDestination.DimensionConfigurations) {
				delta.Add("Spec.EventDestination.CloudWatchDestination.DimensionConfigurations", a.ko.Spec.EventDestination.CloudWatchDestination.DimensionConfigurations, b.ko.Spec.EventDestination.CloudWatchDestination.DimensionConfigurations)
			} else if len(a.ko.Spec.EventDestination.CloudWatchDestination.DimensionConfigurations) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.EventDestination.CloudWatchDestination.DimensionConfigurations, b.ko.Spec.EventDestination.CloudWatchDestination.DimensionConfigurations) {
					delta.Add("Spec.EventDestination.CloudWatchDestination.DimensionConfigurations", a.ko.Spec.EventDestination.CloudWatchDestination.DimensionConfigurations, b.ko.Spec.EventDestination.CloudWatchDestination.DimensionConfigurations)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EventDestination.Enabled, b.ko.Spec.EventDestination.Enabled) {
			delta.Add("Spec.EventDestination.Enabled", a.ko.Spec.EventDestination.Enabled, b.ko.Spec.EventDestination.Enabled)
		} else if a.ko.Spec.EventDestination.Enabled != nil && b.ko.Spec.EventDestination.Enabled != nil {
			if *a.ko.Spec.EventDestination.Enabled != *b.ko.Spec.EventDestination.Enabled {
				delta.Add("Spec.EventDestination.Enabled", a.ko.Spec.EventDestination.Enabled, b.ko.Spec.EventDestination.Enabled)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EventDestination.KinesisFirehoseDestination, b.ko.Spec.EventDestination.KinesisFirehoseDestination) {
			delta.Add("Spec.EventDestination.KinesisFirehoseDestination", a.ko.Spec.EventDestination.KinesisFirehoseDestination, b.ko.Spec.EventDestination.KinesisFirehoseDestination)
		} else if a.ko.Spec.EventDestination.KinesisFirehoseDestination != nil && b.ko.Spec.EventDestination.KinesisFirehoseDestination != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN, b.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN) {
				delta.Add("Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN", a.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN, b.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN)
			} else if a.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN != nil && b.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN != nil {
				if *a.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN != *b.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN {
					delta.Add("Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN", a.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN, b.ko.Spec.EventDestination.KinesisFirehoseDestination.DeliveryStreamARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN, b.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN) {
				delta.Add("Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN", a.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN, b.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN)
			} else if a.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN != nil && b.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN != nil {
				if *a.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN != *b.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN {
					delta.Add("Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN", a.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN, b.ko.Spec.EventDestination.KinesisFirehoseDestination.IAMRoleARN)
				}
			}
		}
		if len(a.ko.Spec.EventDestination.MatchingEventTypes) != len(b.ko.Spec.EventDestination.MatchingEventTypes) {
			delta.Add("Spec.EventDestination.MatchingEventTypes", a.ko.Spec.EventDestination.MatchingEventTypes, b.ko.Spec.EventDestination.MatchingEventTypes)
		} else if len(a.ko.Spec.EventDestination.MatchingEventTypes) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.EventDestination.MatchingEventTypes, b.ko.Spec.EventDestination.MatchingEventTypes) {
				delta.Add("Spec.EventDestination.MatchingEventTypes", a.ko.Spec.EventDestination.MatchingEventTypes, b.ko.Spec.EventDestination.MatchingEventTypes)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EventDestination.Name, b.ko.Spec.EventDestination.Name) {
			delta.Add("Spec.EventDestination.Name", a.ko.Spec.EventDestination.Name, b.ko.Spec.EventDestination.Name)
		} else if a.ko.Spec.EventDestination.Name != nil && b.ko.Spec.EventDestination.Name != nil {
			if *a.ko.Spec.EventDestination.Name != *b.ko.Spec.EventDestination.Name {
				delta.Add("Spec.EventDestination.Name", a.ko.Spec.EventDestination.Name, b.ko.Spec.EventDestination.Name)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EventDestination.SNSDestination, b.ko.Spec.EventDestination.SNSDestination) {
			delta.Add("Spec.EventDestination.SNSDestination", a.ko.Spec.EventDestination.SNSDestination, b.ko.Spec.EventDestination.SNSDestination)
		} else if a.ko.Spec.EventDestination.SNSDestination != nil && b.ko.Spec.EventDestination.SNSDestination != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.EventDestination.SNSDestination.TopicARN, b.ko.Spec.EventDestination.SNSDestination.TopicARN) {
				delta.Add("Spec.EventDestination.SNSDestination.TopicARN", a.ko.Spec.EventDestination.SNSDestination.TopicARN, b.ko.Spec.EventDestination.SNSDestination.TopicARN)
			} else if a.ko.Spec.EventDestination.SNSDestination.TopicARN != nil && b.ko.Spec.EventDestination.SNSDestination.TopicARN != nil {
				if *a.ko.Spec.EventDestination.SNSDestination.TopicARN != *b.ko.Spec.EventDestination.SNSDestination.TopicARN {
					delta.Add("Spec.EventDestination.SNSDestination.TopicARN", a.ko.Spec.EventDestination.SNSDestination.TopicARN, b.ko.Spec.EventDestination.SNSDestination.TopicARN)
				}
			}
		}
	}

	return delta
}
